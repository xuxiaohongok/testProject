package com.zhidian3g.nextad.test;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import redis.clients.jedis.Jedis;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.zhidian3g.common.constant.RedisConstant;
import com.zhidian3g.common.utils.CryptUtils;
import com.zhidian3g.common.utils.JsonUtil;
import com.zhidian3g.common.utils.LoggerUtil;
import com.zhidian3g.common.utils.ZipUtils;
import com.zhidian3g.nextad.domain.AdMessage;
import com.zhidian3g.nextad.redisClient.JedisPools;

public class BaseTest {
	
	@Test
	public void testAllLog() {
		LoggerUtil.addBaseLog("asdg");
		for(int i=0;i<1;i++) {
			LoggerUtil.addRequestLogegerMessage("请求log请求log请求log请求log");
			LoggerUtil.addShowLogegerMessage("曝光请求曝光请求曝光请求曝光请求曝光请求曝光请求");
			LoggerUtil.addWinLogegerMessage("竞价成功请求竞价成功请求竞价成功请求竞价成功请求");
		}
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test
	public void test1() {
		for(int i=0;i<100;i++) {
			System.out.println(getBannerIndex());
		}
	}
	
	private int flyIndex = -1;// 上一次选择的服务器
	private int getFlyIndex() {
		flyIndex = (flyIndex + 1) % 3;
		 return flyIndex + 1;
	 }
	
	private int bannerIndex = -1;// 上一次选择的服务器
	private int getBannerIndex() {
		bannerIndex = (bannerIndex + 1) % 3;
		 return bannerIndex + 1;
	 }
	
	
	@Test
	public void testLog1324() {
		Logger logger = LoggerFactory.getLogger("deviceMessageS0");
		try {
			logger.info("testLog1324");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void testStringReplace() {
		System.out.println("price=%%PRICE%%&cyRId=%%ID%%".replace("%%PRICE%%&", "4000").replace("%%ID%%", "123"));
	}
	
	@Test
	public void getCount() {
		JedisPools jedisPools = JedisPools.getInstance();
		String adId = "2";
		Jedis jedis = jedisPools.getJedis();
//		jedis.sadd(RedisConstant.AD_STOP_IDS, adId);
//		jedis.hset(RedisConstant.AD_ID_CONTROL_COUNT, adId, "0");
//		//说明已经达到控制的广告量
//		Long adControlCount = jedis.hincrBy(RedisConstant.AD_ID_CONTROL_COUNT, adId, -2);
//		System.out.println("adControlCount=" + adControlCount);
//		jedis.lpush(RedisConstant.DEL_ADID,  adId);
		jedis.sadd(RedisConstant.AD_STOP_IDS, adId);
		jedisPools.closeJedis(jedis);
	}
	
	@Test
	public void getCount1() {
		try {
			JedisPools jedisPools = JedisPools.getInstance();
			Jedis jedis = jedisPools.getJedis();
			jedis.lpush("del_adiddel_adid",  "asdgasdg");
			jedis.lpush("asdgasdg",  "asdgasdg");
			jedis.lpush("asdgasdg235",  "asdgasdg");
			jedisPools.closeJedis(jedis);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void testLog() {
		Logger logger = LoggerFactory.getLogger("deviceMessageS0");
		try {
			while(true) {
				logger.info("asdgasdgasdgsdg");
				Thread.sleep(1000);
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void gdsg() {
		try {
			String ok = "DDD3159D6186D7B92FA00348C96DFBFC886EA51E784836DDA924C881D651D474798371B99BB68740D66949292E4A258AA4553C7E2DCDBE13073429DC8E1FFC4DA57343FBA1F338A72A30F623AD4D4E9B02009F107036A1E5AF3C79DD7012F1D9ED1A06F4FD4BDD46EE2CDBA7D38DFA29568790E332A2B115C95EE174E326F709502957613420F8558D7168A6C81EC0D47E9C7BDCD2A5D96D05404B7D2971FCA554969BF31C76D4B822CCFA9B487E98E507D876BA6F468C8F2CD115FAEFA9046A897CE46F3C0028D2D25F0729A1CD4589731AC29CA4985B90E35916E34D2978D402C14ED4EC05180A7E1443041F70E4793369FC56001612E1BA6C4B56CAE2973C41C3C92790BDC8225817A528AF57802E1CD5997C2B54C15B191390A4BD2DC1C4B50695B94B3446971D0AC07D3E6D21497519D50CF7D200F65D236D9235714B5A667B2E427DCE0DC0812E1E8643A59FC2A3C3E74FBFFF5666E144D7F92B2D26430A63DD0720F1E83BE898BB43F5E6A03DBEF2ACF1276C9B164C9D1A28FAE1CF3907B0AA0BDF3472B9F2FA3F9504F51F94896614B3B9418F090CCC591AC1C5DBCF4DD0D025E9FA16ACB1415DC725C3F778FD85F6CC0A722E943D5A46620B01B3C155CC8A73B4BEB0A95EEC89EF32E34F334069B2E1D6ACCA080BDE4C46FD505590A617A9EC3AA9B26CB572AAAD6B6D07C0A26EFFC7F56661B9C330590F401A8774C6EFA797ACA276A3AE307657FF4BBF2F4410EEBE0637F615A678BE2DF83B90CFC288A589D89077A2A3F967FAC7D3E039F3B6A25ED5A14DD2762EA4DE668021CFE4A4DB13CB6D7B4D0785D509205AB66057D3418DB75A70B5DA48990268E5673DC130394D2DFD82027F2373DB562B14616FE4673DECD65425A2BDDD7865F04BB3E916AF26EA7A4E34497518178996D230F96A473FCC8925A7893ABD15C5124AF5FAAF0E6BA3D0F8982EBD5C028644D86A4A69A8FB31BFC0B9F5DA521534FC54B481315B543532EACB570191697F592221E83237FBEC972AC8DEB5910813411372231146C024F15E6E579C3943623C7CEA5B3EB2EBC8BA4F64FC55DC69E9B56D6798948E5847FA6F306C46BF180DF59917B15AF80DCFC65EDCD37BCCF72D90C38BD0F885015CEB4E87D905C566D31158451AC301D83D6EDD554DB8BF431FB553AE0ED09FA8A1F1FB548F8BC30AA63F0DEF8DB7F3E754EA68F1F47AE07E1DDBFBF0982CD9533FB8B67E0327A5CF03F52587F504F2F05FFF280F550437224D5C2E8F5827C0248C5A6EDD45708628473B045EE1AFBBB6FA000C350AF54D5A731902CF16480BCAED5095D73AFEDAEEEA7B12B000C591DE97F10E1D98DDB7C761CB5CA52C712B4EB1BC526F578AEA44D4163D389816C24F68BC73B81FD1E626FDB83452E0F120BCD287883EF7D615B354111A9BB1E7AD752AF1D0A9679C777926D9B317BE0CA419AD64BD1742FDC93865EDCF3B9EBCFC46FDE77004662DC69F98976E16AD87732DBEF7442D51223D7646AABFFECAB8133A7A1D4101FC254208E8CFF237C5EDD1A2F306A01493248E8517F60B3A8C90FA4AD2E9A09C16D3ECEF87E340F27D1BF6FCF418BD94F06547DDF1E055E77AD52AE894FB381910353FF36EF47F68B3A861B48138754D0135E49BA48D3A3FEFDADE2CCB629231CE9A136207F99D9EC7FE779A80105204AD53B39C13BECC5FE5D02A563BEF4807CF778522E91482A460392D11E4B6FBEBC212623B4C93A92D637E3FF087FCFDBE617CCD5BF7139A6E7823A5934D711801D00FB339A814985E1C42CB8B3EB37E9377003D69817F2DCB34E5475B6762EB5F9191CE04C227F33ADCB2E65166F2D641E99781976EFA1D55279C2625ECD86BC193A30932F8D2F5E10062327E6E84D8543B60F945A23A9C0AC9E329675C2BC491B3132C3F647680DF848778DA26F0EFA725E060F089A50CC92F4171D5875C634F7F2373DB562B146156092C97056317DFE7CB616EF3CA29659D6BEAF4FA3E7AB886CD40BF2C64149CB13486E439ADEA4EE524193DE90CC25715C72FF7FDD73694B42507891660D108EF8E31B6B63B14FF01B28B8616B7BC19B06BB967A7AC1AC62026BF038540C8EF8513E551930566F0555E97985F84E6C92CB188932970356823671DFBDB9B27BA06893EDCAFCAA08EC096F59622FB6D5C0ABE0E94E68A17B30BA1E926706CF32D890BCFDFD7A442250E60B896C6885140649A48C93DFBEA9BE5EE45F0DA1B608E68D5818F1D12BC2BD9E138013565E441B35C83A22EDF6ACB476FE69DA0D6BC95FC0771C04CAE42525CB7CEA8E1EACDBCDDE292B3AFCA43B862CBDD0D9BD64ED69034EE3151FC2FF26B3FA2F9A9DD73FCB773BBC031E7C1EE26766B6DA22AF69E61A4E5F589D7E7DF6E65E866B25D835367B0DF072421604E7A898AF60E7B6DFFDC766040C414689801DD0714A3FD66DDF684E616DE1161E3D2BB3FC9EB5CF0612EDA31B2697DBA17449658BFC79A060252BBC6ED72381E9C14D3D1018CCA9B38CEDE4345A6394FBDBBDE310F61418D8E60666A53AD564A580A63DD0720F1E83BED461F5C43CA31344331569F68258FD690123D9860EC0C64EBF59683501F453A5A79A7B1292844167D34A36A93512BD382F3F272A5281AB9C86CEE44A1ED49761698E361F0EC390A853778998EC19DE4A9BED522CB8C6DE85570AD1C4D3B0A10B038917750FDEB871B4776726A1D9BA0C2B0D9998407A50DCAE399A3C1AE3F76D8D802E4C7D0C946033B0E053FBD9228B89D2486B3AB58E2A9F46BDE0DF6F311C844C013DBB52586FEF751F7E8348CC423A6EE29C3FB7AE6C86CEE44A1ED4976D20B06870D22A87A072ECE406BD7550A80C3DE50FC39CB542EC50152FE06BAF0F51282FA9DE88180AA02063CD9550466C45BEDF194A8AE073A0294A7A5ADC76B2E06A67B61E13FD2E5AC06C5996178BA89A908AA1CDF981D62592F8031F58452C86CEE44A1ED4976E9C68B82E1F0139A494DF67EE1BBB1343AC3C27EC2878241F75DEA8F9C4FC2F3540B64E0518E9FB28E4AFB5D9B728CE907E4E1994D8E74E36C1B0148C34FB4F9C86CEE44A1ED4976B38E9C9E33BAB5CD55BB718D9F19D2844EA57260B0573780C22B039F3A2512FE53EC1C26D1047C894D72C8926957ED0D119A032C90FF60879143DCAE2C51B7CC962427BF7CF46834DE3F4E9E1597C5179ABCCC477421FFC9886EA51E784836DDBDF063FAABE1076C1B901611CF3040E3DB4906D8BE52548591F02F657CA9273D2D6D84BDF7F304377519A6DF16C8A596";
			String ok1 = CryptUtils.decrypt(ok, "zhidian@nextad");
			System.out.println("ok=" + ok1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test
	public void test123() {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("accountId", 465l);
			map.put("123", 112);
			String ok = JsonUtil.bean2Json(map);
			System.out.println("ok123=" + ok);
			AdMessage ad1 = JsonUtil.json2Bean(ok, AdMessage.class);
			System.out.println(ad1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test
	public void testOk(){
		try {
			System.out.println("=======");
			String ok = CryptUtils.decrypt("766CECE474370C790F633038AB7FFA256E44E6DEF1F4D0851254B4DBADFA6CFC24F339675BA120983DE9468BF2C475F51960C91F39537290B98AE95B914DC4785E503FC6896718C95ABA4ABB344C9B386A35C398E2B781D1497712DB6E78528499B205CC346E20919381AEBD84F54352B837961CE917EF2BFB186CC75846D786DB97381CBF4528C11B5E480A85E6420E8590CEBC983429F7EC9DD6BCC04AB3CDCC6DF44B5E146E8B62148935A5FFA366D2895183450CC9962ADC735D5EB59C6D1D71E59C941C0D60524E89D8155AA1B07E6EA6D25E9B335D6BE46967FC036A895B5A7CBC6F1FD67C1FA3CE0003255DAA3BBE963920C250C8F5E84095703069FBC1680A2EBBA3E77758E155AC2ACE393FAFDF64A9E24178A1CF8782C996F61C0333FB3D9E3D82CA24A56D708FA41474A590BAB29854514F163982FE6A8253989A6A1D39140A9D259AB3E613A3748EF7BB813D2AF8C19F1F4B67B9CFD31ACCD4FCF5197CD6979E4856D810D97301D48879A445B4A902553F4D72CDD6AAB9628476CFE2BEBBBC9B3209678D74B0D1DDC5766EF5AC484BEF75850FC9729AB102128E4F936EFF25BF39FBBEE3B2D589DAFA8C19116173CD47EE459D44B4B49F9E13231F2048074398E61409EC4E7DFEB276BC7CA7F2AC785BED16EF2153A692EEAC0A2B76F28DC1E9ADC71CE278768F1E806716009D0582BD067AF38CED4ED71376D863146361AD7AB881FDA8B76FE006F8D802EAE40343F73C7A191EF8BFE86940D53EE357A5FA73223C85D8E6D3416157603B6951F85B8D2D42D7DE2A8FB4408DAA7D43676BC712E28605C3FCCD8E8C41F3DF0007836BAE1B0C25F71E67D578A37DB4623782172B8452F81E971376BECAEDD07B04E173FC45AAEBA69A7F34200E4165A95CA24EE6C0851E0D2730C47E2D08AAC73B04A6FB2800483AD748936448BB9792126F19397CA763C35579B68BCE9A08B3C37051C6BE25358B0A4B8A256D544C60934EB08B45B56C44697C198FC11AAEEF40D964E752E4B3389F0D31151837B184A13C5125AB3B3B498BD23F7B4D7D8DA47CA40F834D9271D939B7C0CDEAA6602A648B83788A3FEB74F5150B831065BD74B2C2A62208E53AD79DE9604C25DDE6E1012DB0F69CB2BE90AE13F2D67CD0CEAF1FC43852127A0458394E0630782A9AF21290803BEEFFABC2C2A163B47C8AAD1926B5FA4B6604AF118C5007CFDB9C1E531E370FD45FB6497C5BCB4D6B81D69E29A6C8DC14AE3441088F5E95736A6094642E11383CC13A5CA1CB8001B25A4DBF8C8405B81E78D434DCF1DB1BB34ECA014AE2C0B7DCA66ED37F89D05DA1F2B3ADE6DF0E2DB331C11EE0A0B00981482143B8DE3FE1FEA775B8A3B1C5455B6038E0428FB788C91A53C7A30445251158623C616EE6FF0459EA1CF6D02B063963E5DE25F8B5C2E4017999F834F7AADC222BF17E62E8BF2D5FB9D2895183450CC996680AC371C39EBA7016F3216D1BE59BACED15677DA9E673AE6CAD5517A51C1DFB5BDB8A9F183A588447BA9B9A9631B4D7299BA4EDF965A04E947C123F07CED0A7F2EDA67569BA5BDCF3BFE13D5DAA1CF46804D2456B1DD92F6B67EE88F6B2FC80D383FA417888C023F39A4AA21CFB0D4FBCE43F0B185F1E446D07B0F9D2F5FE4325F71E67D578A37DFFF0C92E3B96DC4DB14C10731026C011AD0F0A63239B9CA55A964F8DFC0D2CCD0A51BC78A81A37CB7B5F0A6B5FFE090F010AFA6153B52FB2D16EA344F40C568A5C0A1D092BAAD3AB3C5AEF34ED42774A9C7F4AD27B059A1412E4D7BD5B48604E35175459957863A4326A8C5B876F80FFDA25062988A9930FF1148EBEDCBA1AE14BC6F64869BE0D4CBB86E72AB5D93CF09E0A2E9CFFA47EB667EA2266E1D2B39B32DACDB0E93FDA84E158C68778079FA841E62A81CCE3D7C6A3853A5AD88FBFBA45E05309013E4240226B52EA606E56C18070F30385E679518279C7CCB34E91F21B680CFFB9021BC1CC44C235255F27BDD3DE5837BA684EE6A06BF464BA37CAD1B810210624A133BD3B498BD23F7B4D7DE42976CC75A4B34C0B19D5DC2C3DED8D38BB57AE98D6A6448DF445F29BD20D19CB33D67A763F8CD53A3DDAC664194ED036985FD98C5931CA9310A4C75D5C9F69F51B9DF5D83FCF74D1BC744ECD606431B8BD465252CF529675C4415630B80FA6DEA7245819B2EFC0645D2CBF8C8CA7A755717105296C929F63F5299B64339A63C1C5CB8C53344EEE295E367BD79BBB0EBD3A1BEB46E16623307299E113F7AE271B06E12127D44CBFF8E563A0EEF49CE22A04079130B640BD96E01B995BEC9FE450FCA77AD4339BF8892F37DCA3CFFC517AF92AABB349F11C9517D7063072B512A2E2E62CF22FB30A6FD63FAA35FBBA86E2C4315753B822E000A35CE92A4D43BF6ED97E550D5F58BD", "zhidian@nextad");
			String jsonData = URLDecoder.decode(ok, "UTF-8");
			jsonData = ZipUtils.ungzip(jsonData);
			System.out.println("========jsonData2=====" + jsonData);
			JSONArray jsonArray = JSON.parseArray(jsonData);
			for(int i=0;i<jsonArray.size(); i++) {
				String jsonString = (String)jsonArray.get(i);
				Map<String, Object> map = (Map<String, Object>)JSON.parse(jsonString);
				String oksadg = (String) map.get("statisticsInfo");
				System.out.println(oksadg);
				for(Entry<String, Object> entry : map.entrySet()) {
					System.out.println(entry.getKey() + "============" + entry.getValue());
				}
			}
			
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void test2() {
		try {
			System.out.println("=======");
			String ok = CryptUtils.decrypt("766CECE474370C790F633038AB7FFA256E44E6DEF1F4D0851254B4DBADFA6CFC24F339675BA120983DE9468BF2C475F51960C91F39537290B98AE95B914DC4785E503FC6896718C95ABA4ABB344C9B386A35C398E2B781D1497712DB6E78528499B205CC346E20919381AEBD84F54352B837961CE917EF2BFB186CC75846D786DB97381CBF4528C11B5E480A85E6420E8590CEBC983429F7EC9DD6BCC04AB3CDCC6DF44B5E146E8B62148935A5FFA366D2895183450CC9962ADC735D5EB59C6D1D71E59C941C0D60524E89D8155AA1B07E6EA6D25E9B335D6BE46967FC036A895B5A7CBC6F1FD67C1FA3CE0003255DAA3BBE963920C250C8F5E84095703069FBC1680A2EBBA3E77758E155AC2ACE393FAFDF64A9E24178A1CF8782C996F61C0333FB3D9E3D82CA24A56D708FA41474A590BAB29854514F163982FE6A8253989A6A1D39140A9D259AB3E613A3748EF7BB813D2AF8C19F1F4B67B9CFD31ACCD4FCF5197CD6979E4856D810D97301D48879A445B4A902553F4D72CDD6AAB9628476CFE2BEBBBC9B3209678D74B0D1DDC5766EF5AC484BEF75850FC9729AB102128E4F936EFF25BF39FBBEE3B2D589DAFA8C19116173CD47EE459D44B4B49F9E13231F2048074398E61409EC4E7DFEB276BC7CA7F2AC785BED16EF2153A692EEAC0A2B76F28DC1E9ADC71CE278768F1E806716009D0582BD067AF38CED4ED71376D863146361AD7AB881FDA8B76FE006F8D802EAE40343F73C7A191EF8BFE86940D53EE357A5FA73223C85D8E6D3416157603B6951F85B8D2D42D7DE2A8FB4408DAA7D43676BC712E28605C3FCCD8E8C41F3DF0007836BAE1B0C25F71E67D578A37DB4623782172B8452F81E971376BECAEDD07B04E173FC45AAEBA69A7F34200E4165A95CA24EE6C0851E0D2730C47E2D08AAC73B04A6FB2800483AD748936448BB9792126F19397CA763C35579B68BCE9A08B3C37051C6BE25358B0A4B8A256D544C60934EB08B45B56C44697C198FC11AAEEF40D964E752E4B3389F0D31151837B184A13C5125AB3B3B498BD23F7B4D7D8DA47CA40F834D9271D939B7C0CDEAA6602A648B83788A3FEB74F5150B831065BD74B2C2A62208E53AD79DE9604C25DDE6E1012DB0F69CB2BE90AE13F2D67CD0CEAF1FC43852127A0458394E0630782A9AF21290803BEEFFABC2C2A163B47C8AAD1926B5FA4B6604AF118C5007CFDB9C1E531E370FD45FB6497C5BCB4D6B81D69E29A6C8DC14AE3441088F5E95736A6094642E11383CC13A5CA1CB8001B25A4DBF8C8405B81E78D434DCF1DB1BB34ECA014AE2C0B7DCA66ED37F89D05DA1F2B3ADE6DF0E2DB331C11EE0A0B00981482143B8DE3FE1FEA775B8A3B1C5455B6038E0428FB788C91A53C7A30445251158623C616EE6FF0459EA1CF6D02B063963E5DE25F8B5C2E4017999F834F7AADC222BF17E62E8BF2D5FB9D2895183450CC996680AC371C39EBA7016F3216D1BE59BACED15677DA9E673AE6CAD5517A51C1DFB5BDB8A9F183A588447BA9B9A9631B4D7299BA4EDF965A04E947C123F07CED0A7F2EDA67569BA5BDCF3BFE13D5DAA1CF46804D2456B1DD92F6B67EE88F6B2FC80D383FA417888C023F39A4AA21CFB0D4FBCE43F0B185F1E446D07B0F9D2F5FE4325F71E67D578A37DFFF0C92E3B96DC4DB14C10731026C011AD0F0A63239B9CA55A964F8DFC0D2CCD0A51BC78A81A37CB7B5F0A6B5FFE090F010AFA6153B52FB2D16EA344F40C568A5C0A1D092BAAD3AB3C5AEF34ED42774A9C7F4AD27B059A1412E4D7BD5B48604E35175459957863A4326A8C5B876F80FFDA25062988A9930FF1148EBEDCBA1AE14BC6F64869BE0D4CBB86E72AB5D93CF09E0A2E9CFFA47EB667EA2266E1D2B39B32DACDB0E93FDA84E158C68778079FA841E62A81CCE3D7C6A3853A5AD88FBFBA45E05309013E4240226B52EA606E56C18070F30385E679518279C7CCB34E91F21B680CFFB9021BC1CC44C235255F27BDD3DE5837BA684EE6A06BF464BA37CAD1B810210624A133BD3B498BD23F7B4D7DE42976CC75A4B34C0B19D5DC2C3DED8D38BB57AE98D6A6448DF445F29BD20D19CB33D67A763F8CD53A3DDAC664194ED036985FD98C5931CA9310A4C75D5C9F69F51B9DF5D83FCF74D1BC744ECD606431B8BD465252CF529675C4415630B80FA6DEA7245819B2EFC0645D2CBF8C8CA7A755717105296C929F63F5299B64339A63C1C5CB8C53344EEE295E367BD79BBB0EBD3A1BEB46E16623307299E113F7AE271B06E12127D44CBFF8E563A0EEF49CE22A04079130B640BD96E01B995BEC9FE450FCA77AD4339BF8892F37DCA3CFFC517AF92AABB349F11C9517D7063072B512A2E2E62CF22FB30A6FD63FAA35FBBA86E2C4315753B822E000A35CE92A4D43BF6ED97E550D5F58BD", "zhidian@nextad");
			String jsonData = URLDecoder.decode(ok, "UTF-8");
			jsonData = ZipUtils.ungzip(jsonData);
			System.out.println("========jsonData2=====" + jsonData);
			JSONArray jsonArray = JSON.parseArray(jsonData);
			for(int i=0;i<jsonArray.size(); i++) {
				String jsonString = (String)jsonArray.get(i);
				Map<String, Object> map = (Map<String, Object>)JSON.parse(jsonString);
				String oksadg = (String) map.get("statisticsInfo");
				System.out.println(oksadg);
				for(Entry<String, Object> entry : map.entrySet()) {
					System.out.println(entry.getKey() + "============" + entry.getValue());
				}
			}
			
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	
	}
	
}
